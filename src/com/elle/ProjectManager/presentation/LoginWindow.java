/**
 * @author Louis W.
 * @author Carlos Igreja
 * @since June 10, 2015
 * @version 0.6.3
 */
package com.elle.ProjectManager.presentation;

import static com.elle.ProjectManager.presentation.ProjectManagerWindow.version;
import com.elle.ProjectManager.admissions.Authorization;
import com.elle.ProjectManager.database.DBConnection;
import com.elle.ProjectManager.database.Database;
import com.elle.ProjectManager.database.Server;
import static com.elle.ProjectManager.presentation.LogWindow.HYPHENS;
import java.awt.Font;
import java.awt.FontMetrics;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;


public class LoginWindow extends JFrame {

    // class attributes 
    private String selectedServer;              // selected server
    private String selectedDB;                  // selected database
    private String userName;                    // user name to login 
    private String userPassword;                // user password to login

    // class component instances
    private ProjectManagerWindow projectManager;
    private EditDatabaseWindow editDatabaseList;
    private LogWindow logWindow;
    private ArrayList<Server> servers;
    
    public LoginWindow() {
        //set content pane
        this.setContentPane(new JLabel(new ImageIcon(getClass().getResource("image.png"))));

        initComponents();
        this.setTitle();
        loadServers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jInputPanel = new javax.swing.JPanel();
        server = new javax.swing.JLabel();
        comboBoxServer = new javax.swing.JComboBox();
        username = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        passwordFieldPW = new javax.swing.JPasswordField();
        textFieldUsername = new javax.swing.JTextField();
        database = new javax.swing.JLabel();
        comboBoxDatabase = new javax.swing.JComboBox();
        jButtonPanel = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        btnEditDB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(475, 325));
        setMinimumSize(new java.awt.Dimension(475, 325));
        setPreferredSize(new java.awt.Dimension(475, 350));
        setSize(new java.awt.Dimension(475, 325));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jInputPanel.setMaximumSize(new java.awt.Dimension(475, 325));
        jInputPanel.setMinimumSize(new java.awt.Dimension(475, 325));
        jInputPanel.setOpaque(false);
        jInputPanel.setPreferredSize(new java.awt.Dimension(475, 325));
        jInputPanel.setLayout(new java.awt.GridBagLayout());

        server.setText("<html><b>Server</b></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jInputPanel.add(server, gridBagConstraints);

        comboBoxServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "pupone", "Local", "AWS" }));
        comboBoxServer.setPreferredSize(new java.awt.Dimension(61, 27));
        comboBoxServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxServerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        jInputPanel.add(comboBoxServer, gridBagConstraints);

        username.setText("<html><b>Username</b></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(24, 0, 0, 0);
        jInputPanel.add(username, gridBagConstraints);

        password.setText("<html><b>Password</html></b>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(19, 0, 0, 0);
        jInputPanel.add(password, gridBagConstraints);

        passwordFieldPW.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        passwordFieldPW.setMinimumSize(new java.awt.Dimension(113, 27));
        passwordFieldPW.setPreferredSize(new java.awt.Dimension(113, 27));
        passwordFieldPW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldPWActionPerformed(evt);
            }
        });
        passwordFieldPW.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldPWKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 8, 0, 0);
        jInputPanel.add(passwordFieldPW, gridBagConstraints);

        textFieldUsername.setMinimumSize(new java.awt.Dimension(113, 27));
        textFieldUsername.setPreferredSize(new java.awt.Dimension(113, 27));
        textFieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldUsernameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 8, 0, 0);
        jInputPanel.add(textFieldUsername, gridBagConstraints);

        database.setText("<html><b>Database</b></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        jInputPanel.add(database, gridBagConstraints);

        comboBoxDatabase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dummy", "Elle2015", "pupone_dummy", "pupone_Analyster" }));
        comboBoxDatabase.setPreferredSize(new java.awt.Dimension(113, 27));
        comboBoxDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDatabaseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 10, 0, 0);
        jInputPanel.add(comboBoxDatabase, gridBagConstraints);

        jButtonPanel.setOpaque(false);

        btnCancel.setText("Cancel/ Log off");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnLogin.setText("Log in");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jButtonPanelLayout = new javax.swing.GroupLayout(jButtonPanel);
        jButtonPanel.setLayout(jButtonPanelLayout);
        jButtonPanelLayout.setHorizontalGroup(
            jButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jButtonPanelLayout.setVerticalGroup(
            jButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnLogin)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jInputPanel.add(jButtonPanel, gridBagConstraints);

        btnEditDB.setText("Edit");
        btnEditDB.setMaximumSize(new java.awt.Dimension(51, 27));
        btnEditDB.setMinimumSize(new java.awt.Dimension(51, 27));
        btnEditDB.setPreferredSize(new java.awt.Dimension(51, 27));
        btnEditDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jInputPanel.add(btnEditDB, gridBagConstraints);

        jLabel1.setText("<html><b>Please input your username and password to log in.</b></html>");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 60, 0, 0);
        jInputPanel.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 42;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 0);
        jInputPanel.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(jInputPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.close();

    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Close down application properly
     */
    public void close() {

        // terminate window and return resources
        this.dispose();
        System.exit(0); // Terminates the currently running Java Virtual Machine.
    }
    private void btnLoginActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            login();
        } catch (IOException ex) {
            Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void passwordFieldPWKeyPressed(KeyEvent evt) {//GEN-FIRST:event_passwordFieldPWKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            try {
                login();
            } catch (IOException ex) {
                Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_passwordFieldPWKeyPressed

    private void comboBoxDatabaseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboBoxDatabaseActionPerformed

        updateSelection();
    }//GEN-LAST:event_comboBoxDatabaseActionPerformed

    private void comboBoxServerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboBoxServerActionPerformed

        updateSelection();
    }//GEN-LAST:event_comboBoxServerActionPerformed

    private void btnEditDBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEditDBActionPerformed

        // create a new edit selectedDB window
        editDatabaseList = new EditDatabaseWindow(this); // maybe we can make it not dependant on this
        editDatabaseList.setLocationRelativeTo(this);
        editDatabaseList.setVisible(true);
    }//GEN-LAST:event_btnEditDBActionPerformed

    private void textFieldUsernameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_textFieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldUsernameActionPerformed

    private void passwordFieldPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldPWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldPWActionPerformed

    public String getUserName() {
        String userNameToPM = userName.substring(7);
        return userNameToPM;
    }

    /**
     * login
     */
    public void login() throws IOException, BadLocationException {

        // get user data
        selectedServer = comboBoxServer.getSelectedItem().toString();
        selectedDB = comboBoxDatabase.getSelectedItem().toString();
        userName = textFieldUsername.getText();
        char[] pw = passwordFieldPW.getPassword();
        userPassword = String.valueOf(pw);
        
        // logwindow
        logWindow = new LogWindow(); 
        logWindow.setUserLogFileDir(this.getUserName());
        // write to log file
        String date = logWindow.dateFormat.format(new Date());
        logWindow.addMessage(HYPHENS + date + HYPHENS);
        logWindow.readMessages(); // read log messages from the log file
        
        // connect to database
        jLabel1.setText("Authenticating");
        logWindow.addMessageWithDate("3:Start to connect..."+selectedDB);
        jLabel2.setText("<html><b>Start to connect database..."+selectedDB+"</b></html>");
        jLabel2.paintImmediately(jLabel2.getVisibleRect());

        if(DBConnection.connect(selectedServer, selectedDB, userName, userPassword)){
            logWindow.addMessageWithDate("Connect successfully!");
            
            jLabel2.setText("<html><b>Connection successful!<br>Authenticating...</b></html>");
           jLabel2.paintImmediately(jLabel2.getVisibleRect());
          
           logWindow.addMessageWithDate("Authenticating...");
            
            
            if(!Authorization.getInfoFromDB()){
                logWindow.addMessageWithDate("This user has not been authorized!"
                                          + "\n Access denied!");
                
                jLabel2.setText("This user has not been authorized!"
                                          + "\n Access denied!");
                jLabel2.paintImmediately(jLabel2.getVisibleRect());
                JOptionPane.showMessageDialog(this, "You have not been authorized. Default user access.");
                JOptionPane.showMessageDialog(this, "Logged in as default user.");
            }
            
            userName = userName.substring(7);
             System.out.println("userName: " + userName);
            logWindow.addMessageWithDate("Authenticating...");
            logWindow.addMessageWithDate("Authentication Successful!" + " Username: " + userName);
            
            jLabel2.setText("<html><b>Authentication complete!" + " Username: " + userName+ "<br> Loading tables...</b></html>");
            jLabel2.paintImmediately(jLabel2.getVisibleRect());
            
            
            // create an projectManager object
           projectManager = new ProjectManagerWindow(userName, true);
           
           projectManager.setUserName(userName);
            // pass the log window to projectManager
           projectManager.setLogWindow(logWindow);

            // pass the selectedDB to projectManager
            // it is used in sql statements
           projectManager.setDatabase(selectedDB);
            
            //pass the selectedServer to project Manager
            //used to show the server in the menubar
            projectManager.setServer(selectedServer);

            // show the database and server names in menubar
            projectManager.showDatabase();

            // show projectManager
           projectManager.setLocationRelativeTo(this);
            projectManager.setVisible(true);
            
            

            // terminate this object
            this.dispose();// returns used resources
            
        } else {

            JOptionPane.showMessageDialog(this,
                    "Cannot access remote db server.\n Now enter the offline mode.",
                    "Error Message",
                   JOptionPane.ERROR_MESSAGE);
       
            //passwordFieldPW.setText("");
            logWindow.addMessageWithDate("Entering offline mode..");
            Authorization.setAdminComponentType("user");
            Authorization.setAccessLevel("user");
            userName = userName.substring(7);
            
            // create an projectManager object
            projectManager = new ProjectManagerWindow(userName,false);
           
            // pass the log window to projectManager
            projectManager.setLogWindow(logWindow);

            // pass the selectedDB to projectManager
            // it is used in sql statements
            projectManager.setDatabase(selectedDB);

            // show the database name in menubar
            projectManager.showDatabase();

            // show projectManager
            projectManager.setLocationRelativeTo(this);
            projectManager.setVisible(true);
            
            

            // terminate this object
            this.dispose();// returns used resources
            
            
       }
       

    }
    
    private DefaultComboBoxModel getServersCBModel() {
        Vector serverNames = new Vector();
        for(Server server: servers){
            serverNames.addElement(server.getName());
        }
        if(serverNames.isEmpty()){
            serverNames.addElement("");
        }
        return new DefaultComboBoxModel(serverNames);
    }

    private DefaultComboBoxModel getDatabasesCBModel(String serverName) {
        Vector databases = new Vector();
        for(Server server: servers){
            if(server.getName().equals(serverName)){
                for(Database db: server.getDatabases()){
                    databases.addElement(db.getName());
                }
            }
        }
        if(databases.isEmpty()){
            databases.addElement("");
        }
        return new DefaultComboBoxModel(databases);
    }
    
    public void loadServers() {
        servers = DBConnection.readServers();
        // set comboboxes for servers and databases
        comboBoxServer.setModel(getServersCBModel());
        comboBoxDatabase.setModel(getDatabasesCBModel(servers.get(0).getName()));
        comboBoxServer.setSelectedIndex(getDefaultServer());
        int server = comboBoxServer.getSelectedIndex();
        int defaultDbIndex = getDefaultDatabase(server);
        Database db = servers.get(server).getDatabases().get(defaultDbIndex);
        comboBoxDatabase.setSelectedIndex(defaultDbIndex);
        textFieldUsername.setText(db.getUsername());
        passwordFieldPW.setText(db.getPassword());
    }
    
    private int getDefaultServer() {
        int server = 0;
        for(int i = 0; i < servers.size(); i++){
            if(servers.get(i).isDefaultSelection()){
                server = i;
                break;
            }
        }
        return server;
    }

    private int getDefaultDatabase(int server) {
        int database = 0;
        ArrayList<Database> databases = servers.get(server).getDatabases();
        for(int i = 0; i < databases.size(); i++){
            if(databases.get(i).isDefaultSelection()){
                database = i;
                break;
            }
        }
        return database;
    }

    /**
     * used to update the selection when a combobox is changed
     */
    private void updateSelection() {
        String selectedServer;
        selectedServer = comboBoxServer.getSelectedItem().toString();
        comboBoxDatabase.setModel(getDatabasesCBModel(selectedServer));
        int server = comboBoxServer.getSelectedIndex();
        int dbIndex = getDefaultDatabase(server);
        comboBoxDatabase.setSelectedIndex(dbIndex);
        Database db = servers.get(server).getDatabases().get(dbIndex);
        textFieldUsername.setText(db.getUsername());
        passwordFieldPW.setText(db.getPassword());
    }
    /*Corinne 7/11/16
    //calculate the left spacing needed to center the title, 
     create a formatted string which contains this space, and add the formatted string(spacing) to the title*/
    private void setTitle(){
        Font f = this.getFont();
        FontMetrics fm = this.getFontMetrics(f);
        String title = "Log in to Project Manager " + version;
        
        /*calcullate the left spacing needed to center the title
        This may not return an accurate value. Adjust the amount 
        subtracted from z/y to obtain a more accurate value.*/
        int x = fm.stringWidth(title);
        int y = fm.stringWidth(" ");
        int z = this.getWidth()/2 - (x/2);
        int w = z/y - 11; //here subtract from z/y to position the string closer to the center
        String pad ="";
        //for (int i=0; i!=w; i++) pad +=" "; 
        pad = String.format("%"+w+"s", pad);
        this.setTitle(pad+title);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEditDB;
    private javax.swing.JButton btnLogin;
    private javax.swing.JComboBox comboBoxDatabase;
    private javax.swing.JComboBox comboBoxServer;
    private javax.swing.JLabel database;
    private javax.swing.JPanel jButtonPanel;
    private javax.swing.JPanel jInputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel password;
    private javax.swing.JPasswordField passwordFieldPW;
    private javax.swing.JLabel server;
    private javax.swing.JTextField textFieldUsername;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables

}
